name: build-julia-notebook-jp

on: 
  push: 
    branches:
      - main
  schedule:
    # Run every day at 24:00 JST
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: julia-environment
  #set tagname
  TAG_NAME: latest
  #set targetdir
  TARGET_DIR: ./

jobs:
  upstream-digest-check:
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.set-update.outputs.update }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get base image digest
        id: get-base-image-digest
        run: |
          mkdir -p ~/.base_image_digest
          touch ~/.base_image_digest/digests.txt

          # Dockerfile のパスを指定
          DOCKERFILE="Dockerfile"

          # Dockerfile 内の FROM ステートメントの値を再帰的に取得する関数
          function get_from_statements() {
              local dockerfile=$1
              local from_statements=()
              declare -A args=() # 連想配列を宣言

              # Dockerfile を行ごとに読み込み、FROM ステートメントを探す
              while IFS= read -r line; do
                  if [[ $line =~ ^ARG[[:space:]]+(.*)$ ]]; then
                      local arg=("${BASH_REMATCH[1]//[\"\']}")
                      local arg_name=${arg%%=*}
                      local arg_value=${arg#*=}

                      args[$arg_name]=$arg_value

                  elif [[ $line =~ ^FROM[[:space:]]+(.*):(.*)$ ]]; then
                      local from_statement=${BASH_REMATCH[1]}:${BASH_REMATCH[2]}

                      # ASが後にあったらAS以降を消して上書き
                      if [[ $from_statement == *" AS"* ]]; then
                          from_statement=${from_statement%% AS*}
                      fi

                      # 環境変数を置換
                      for arg_name in "${!args[@]}"; do
                          from_statement=${from_statement//\$\{$arg_name\}/${args[${arg_name}]}}
                      done

                      from_statements+=("$from_statement")
                  fi
              done < "$dockerfile"
              echo "${from_statements[@]}"
          }

          # イメージの digest を取得する関数
          function get_image_digest() {
              local image=$1
              local digest=$(docker manifest inspect "$from_statement" -v | jq -r '.[0].Descriptor.digest' 2>/dev/null)

              if [ -n "$digest" ]; then
                  echo "$digest"
              else
                  echo "イメージ '$image' の digest を取得できませんでした。"
              fi
          }

          from_statements=($(get_from_statements "$DOCKERFILE"))

          if [ ${#from_statements[@]} -eq 0 ]; then
              echo "Dockerfile 内で FROM ステートメントが見つかりませんでした。"
          else
              digest_list=()

              for from_statement in "${from_statements[@]}"; do
                  # イメージの digest を取得
                  digest=$(get_image_digest "$from_statement")
                  digest_list+=("$digest")
              done

              for digest in "${digest_list[@]}"; do
                  echo "$digest" > ~/.base_image_digest/digests.txt
              done
          fi

          echo digest-list=$(md5sum ~/.base_image_digest/digests.txt) >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache
        with:
          path: ~/.base_image_digest
          key: ${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}-${{ steps.get-base-image-digest.outputs.digest-list }}

      - name: set update flag
        id: set-update
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "update=true" >> "$GITHUB_OUTPUT"

  push-image:
    needs: upstream-digest-check
    # Ensure test job passes before pushing image.
    if: ${{ needs.upstream-digest-check.outputs.update == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=`echo ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]'`" >> ${GITHUB_ENV}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  merge:
    runs-on: ubuntu-latest
    needs:
      - push-image
    steps:
      - name: Prepare
        run: |
          echo "REGISTRY_IMAGE=`echo ghcr.io/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE }} | tr '[:upper:]' '[:lower:]'`" >> ${GITHUB_ENV}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,prefix=pr-,suffix=,event=pr
            type=sha
            type=raw,value=${{ env.TAG_NAME }},enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
